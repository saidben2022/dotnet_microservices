name: dockercompose4834651953373117593
services:
  basket.api:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: Services/Basket/Basket.Api/Basket.Api/Dockerfile
    container_name: besket.api
    depends_on:
      basketdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: basketdb:6379
      GrpcSettings:DiscountUrl: http://discount.grpc
    image: basketapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8001"
      protocol: tcp
  basketdb:
    container_name: basket.db
    image: redis:alpine
    networks:
      default: null
    ports:
    - mode: ingress
      target: 6379
      published: "6379"
      protocol: tcp
    restart: always
  catalog.api:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: Services/Catalog/Catalog.Api/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8000"
      protocol: tcp
  catalogdb:
    container_name: catalog.db
    image: mongo
    networks:
      default: null
    ports:
    - mode: ingress
      target: 27017
      published: "27017"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: mongo_data
      target: /data/db
      volume: {}
  discount.api:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: Services/Discount/Discount.Api/Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User
        Id=postgres;Password=postgres1993;
    image: discountapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8002"
      protocol: tcp
  discount.grpc:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
    container_name: discount.grpc
    depends_on:
      discountdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User
        Id=postgres;Password=postgres1993;
    image: discountgrpc
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8003"
      protocol: tcp
  discountdb:
    container_name: discount.db
    environment:
      POSTGRES_DB: DiscountDb
      POSTGRES_PASSWORD: postgres1993
      POSTGRES_USER: postgres
    image: postgres
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: "5432"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
      volume: {}
  ocelotapigateway:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: ApiGateway/OcelotApiGateway/Dockerfile
    container_name: ocelot.api.gateway
    depends_on:
      basket.api:
        condition: service_started
      catalog.api:
        condition: service_started
      discount.api:
        condition: service_started
      order.api:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    image: ocelotapigateway
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8010"
      protocol: tcp
  orderdb:
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: Saidben1993*a
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 1433
      published: "1433"
      protocol: tcp
    restart: always
  ordering.api:
    build:
      context: D:\dot net repos\AspdotnetMicroservice
      dockerfile: Services/Ordering/Ordering.Api/Dockerfile
    container_name: order.api
    depends_on:
      orderdb:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:OrderingConnectionString: Server=orderdb;Database=OrderDb;User
        Id=sa;Password=Saidben1993*a
    image: orderingapi
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "8004"
      protocol: tcp
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin1993
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
    - mode: ingress
      target: 80
      published: "5050"
      protocol: tcp
    restart: always
    volumes:
    - type: volume
      source: pgadmin_data
      target: /root/.pgadmin
      volume: {}
networks:
  default:
    name: dockercompose4834651953373117593_default
volumes:
  mongo_data:
    name: dockercompose4834651953373117593_mongo_data
  pgadmin_data:
    name: dockercompose4834651953373117593_pgadmin_data
  postgres_data:
    name: dockercompose4834651953373117593_postgres_data